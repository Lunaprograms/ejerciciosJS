// Destructuraci√≥n

// 1. INICIALIZAR VARIABLES A PARTIR DE DATOS ALMACENADOS EN LISTAS.
let uno, dos, rest; // Declara pero no inicializa la variable.
listaVariablesNaive = ["Esta para para uno NAIVE", "Esta para para dos NAIVE"];
listaVariables = ["Esta para uno", "Esta para dos"];

// Forma naive de asignar los valores a estas variables:
uno = listaVariablesNaive[0];
dos = listaVariablesNaive[1];
console.log(uno, dos);

/*¬øEs posible hacerlo en una sola linea? ORBIUM.
Aqu√≠ se est√° haciendo "Destructuring" con listas.

- Recuerda que para crear listas u objetos se puede usar la sintaxis literal -> [] y {}
- Dicha sintaxis es de hecho una expresi√≥n que se resuelve en la creaci√≥n de un objeto o array.
- Lo m√°s com√∫n es que se le asigne una variable a estos datos -> let variable = [];
- Al ser una expresi√≥n se encuentran del lado DERECHO del operador "=". izq = der.

* La desestructuraci√≥n utiliza una sintaxis similar [] y {}
* Pero se usa en el lado IZQUIERDO de la asignaci√≥n.
* La destructuraci√≥n se usa para definir qu√© valores desempacar de la - VARIABLE ORIGEN -.
-> En el ejemplo que sigue, la destructuraci√≥n se usa para definir que valores desempacar
de listaVariables --> ["Esta vara para uno", "Esta vara para dos"];
- listaVariables ES LA VARIABLE DE ORIGEN.
*/
[uno, dos] = listaVariables; // Desempaca el primer item y asignalo a uno, desempaca el segundo item y asignalo a dos.
console.log(uno, dos);

/*
1.1) DESTRUCTURACI√ìN Y REST.
Tambi√©n es posible hacer uso del operador rest.
Al usar rest, todos los items restantes ser√°n almacenados en un nuevo array.

En el ejemplo que sigue, hay muchasNovias. Quiero que m√≠nimo Titi y Gabriela
tengan su propia variable, el resto me gustar√≠a que estuvieran guardados en una
variable que apunte a la lista de novias.
 */
let titi, gabriela, elResto;
let muchasNovias = ["Titi", "Gabriela", "Nicolle", "Sof√≠a", "Mar√≠a", "Thalia"];
[titi, gabriela, ...elResto] = muchasNovias;
console.log(titi, gabriela, elResto);
console.log(titi, gabriela, ...elResto); // Haciendo uso de SPREAD. S√≠ spread, no es un error.

/*
1.2) DESTRUCTURACI√ìN DE M√ÅS ELEMENTOS QUE LA VARIABLE DE ORIGEN.

¬øQu√© pasa si quiero desempacar m√°s elementos de los que existen en la variable de origen?
Por ejemplo, si tengo pocas novias pero quiero desempacar m√°s de las que tengo.

*/
let laura, pocasNovias;
pocasNovias = ["Laura"];
[laura, titi, gabriela] = pocasNovias;
console.log(laura, titi, gabriela); // Laura undefined undefined

/*
1.3) SWAPPING VARIABLES.
No tengo dos novias pero s√≠ tengo una esposa swinger. Conocemos a otra pareja swinger y decidimos
hacer un cambio, por lo que mi pareja cambiar√° en la fiesta.

*/
let miPareja = "Laura";
let fulana = "Fulanita";
console.log(`Estoy bailando con ${miPareja}, no con ${fulana}`);
[miPareja, fulana] = [fulana, miPareja]; // Swapping.
console.log(`Estoy bailando con ${miPareja}, no con ${fulana}`);

/*
AHORA. Digamos que tengo una lista ORDENADA de mis ropa de marca favorita.
Siendo Balenciaga lo que m√°s me gusta y Adidas lo que menos.

Pero me entero que Balenciaga se ha visto involucrada en actos de pedofilia.
¬øC√≥mo le hago para pasarlo a √∫ltimo nivel?
 */
let marcas = ["Balenciaga", "Gucci", "Chanel", "Adidas"];
[marcas[3], marcas[0]] = [marcas[0], marcas[3]];
console.log(marcas);

/*
1.4) MANIPULAR UN ARRAY QUE ES RETORNADO POR UNA FUNCI√ìN.
Si una funci√≥n retorna un array, destructurarlo ayuda a que sea m√°s f√°cil.

Ejemplo super duper f√°cil. La siguiente funci√≥n retorna un array, el cual puede ser procesado
EN UNA SOLA LINEA con  destructuraci√≥n.
*/
let appleOne, appleTwo;
let manzanas = () => ["üçè", "üçé"];
[appleOne, appleTwo] = manzanas();
console.log(appleOne, appleTwo);

/*
No solo las funciones retornan arrays. Tambi√©n las APIs, no se trata de entender APIs aqu√≠, por lo que no
se tiene que entender tode lo que est√° pasando a continuaci√≥n.

El U.S.DEPARTMENT OF AGRICULTURE tiene mucha informaci√≥n sobre alimentos, uno de ellos es el FoodData Central.
De acuerdo con su p√°gina se trata de:
"Is an integrated data system that provides expanded nutrient profile data and links to related agricultural and
experimental research. Provides a broad snapshot in time of the nutrients and other components found in a wide variety
of foods and food products."

- Para acceder a la API y obtener informaci√≥n nutricional de alimentos, necesitamos una llave, ya la tenemos:
API KEY: YkWcmD2JhR09ct7sq8kl8cGxtxxbWVoHVK7h5Wp6

- Le vamos a decir a JS que haga un requerimiento a la computadora del USDA. La cual tiene una direcci√≥n
de internet: https://api.nal.usda.gov

- Pero si vamos a esta direcci√≥n nos va a llevar a National Agricultural Library, que supuestamente es
"is one of five national libraries of the United States. It houses one of the world's largest
collections devoted to agriculture and its related sciences." Ser√≠a el equivalente de decir que
Rodrigo vive en Av. Revoluci√≥n 1187, ¬øen qu√© departamento?  no sabemos.

- Necesitamos decirle en qu√© parte, para esto le vamos a decir la direcci√≥n completa:

https://api.nal.usda.gov/fdc/v1/foods/search?api_key={aqu√≠ va tu llave}&query={aqu√≠ va tu b√∫squeda}

Veamos como se hace.

 */
let searchFood = async (query, maxNumberResponses) => {
  // 1. Declara variables.
  let appleOne, appleTwo;

  // 2. Aqu√≠ est√° la KEY que USDA me dio para acceder a su base de datos.
  const APIKEY = "YkWcmD2JhR09ct7sq8kl8cGxtxxbWVoHVK7h5Wp6";

  // 3. Defino el URL y criterios de b√∫squeda.
  const URL = `https://api.nal.usda.gov/fdc/v1/foods/search?query=${query}&pageSize=${maxNumberResponses}&api_key=${APIKEY}`;

  // 4. Llevo a cabo el request. Yo s√© que me va a regresar un array con dos objetos --> [{}, {}]
  let array = await fetch(URL)
    .then((response) => response.json())
    .then((object) => object.foods);

  // Aqu√≠ saco los dos objetos destructurandolos.
  [appleOne, appleTwo] = array;
  console.log(appleOne, appleTwo);

  console.log(appleOne.foodNutrients);
};

searchFood("apple", 2);

// ================================================================================
// 1. INICIALIZAR VARIABLES A PARTIR DE DATOS ALMACENADOS EN OBJETOS.
// Imaginemos un objeto que represente un usuario.
let userObject = {
  firstName: "Cynthia",
  lastName: "Owen",
  fullName: "Cynthia Owen",
  chineseName: "Á™¶‰øûËéâÊ¢Å",
  children: ["Nicholas"],
  favouriteChild: "Nicholas",
  age: 49,
  telephone: "17758263632",
  words: "Hello, my name is Cynthia Owen, you can call me ÈÇÇÈÄÖ‰∏ÄÁâáÊó∂ÂÖâ.",
  bestFriends: "ËêåËêå, NiKolaS, Jane Anna",
};
// Quiero asignar fullName y telephone a dos variables. Primero hag√°moslo de forma naive.
let userFullName, userTelephone;
userFullName = userObject.fullName;
userTelephone = userObject.telephone;

// Ahora vamos a hacerlo con destructuraci√≥n. QUE HUEVA.
// La destructuraci√≥n est√° de hueva si el objeto es muy grande.
/*
Hay varias cosas que observar:
1. Es una expresi√≥n, pero JAVASCRIPT no entiende si es un statement o una
expresi√≥n. Entonces tienes que ponerlo entre par√©ntesis.

2. Si lo hacemos de la siguiente manera: ({uno, dos} = {a: 10, b:20});
uno y dos van a tener el valor de undefined, las variables tienen que ser
LAS MISMAS que las propiedades del objeto por lo tanto tendr√≠a que ser as√≠:
({uno, dos} = {uno: 10, dos:20})
 */
({ uno, dos } = { a: 10, b: 20 });
// console.log(uno, dos);

({ uno, dos } = { uno: 10, dos: 20 });
// console.log(uno, dos);

// Tambi√©n se puede usar rest, le veo m√°s utilidad al manejar objetos.

({ firstName, lastName, ...rest } = userObject);
// console.log(firstName);
// console.log(lastName);
// console.log(rest);
